import os
from operator import itemgetter
from typing import List, Tuple

from dotenv import load_dotenv
from langchain.agents.format_scratchpad import format_to_openai_function_messages
from langchain_core.messages import AIMessage, HumanMessage
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import (
    format_document,
)
from langchain_core.prompts.chat import (
    ChatPromptTemplate,
    MessagesPlaceholder,
)
from langchain_core.prompts.prompt import PromptTemplate
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_core.runnables import (
    RunnableBranch,
    RunnableLambda,
    RunnableParallel,
)
from langchain_core.runnables import RunnablePassthrough

from src.agents.agent_creation import llm
from text_embedding import retriever

# Load environment variables
load_dotenv()
pinecone_index = os.environ.get('PINECONE_INDEX', 'autopentest')

# Condense a chat history and follow-up question into a standalone question
condense_question_prompt_template = """Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.
Chat History:
{messages}
Follow Up Input: {question}
Standalone question:"""  # noqa: E501
condense_question_prompt = PromptTemplate.from_template(condense_question_prompt_template)

# RAG answer synthesis prompt
answer_prompt_template = """You are a helpful assistant. Use tools (only if necessary) to best answer the users questions. Answer the question based on the following context:
<context>
{context}
</context>"""
rag_chain_answer_prompt = ChatPromptTemplate.from_messages(
    [
        ("system", answer_prompt_template),
        MessagesPlaceholder(variable_name="messages"),
        ("user", "{question}"),
        MessagesPlaceholder(variable_name="agent_scratchpad"),
    ]
)

# Conversational Retrieval Chain
default_document_prompt = PromptTemplate.from_template(template="{page_content}")


def _combine_documents(
        docs, document_prompt=default_document_prompt, document_separator="\n\n"
):
    doc_strings = [format_document(doc, document_prompt) for doc in docs]
    return document_separator.join(doc_strings)


def _format_messages(messages: List[Tuple[str, str]]) -> List:
    buffer = []
    for human, ai in messages:
        buffer.append(HumanMessage(content=human))
        buffer.append(AIMessage(content=ai))
    return buffer


# User input
class RagChainInputType(BaseModel):
    messages: List[Tuple[str, str]] = Field(..., extra={"widget": {"type": "chat"}})
    question: str


_search_query = RunnableBranch(
    # If input includes messages, we condense it with the follow-up question
    (
        RunnableLambda(lambda x: bool(x.get("messages"))).with_config(
            run_name="HasChatHistoryCheck"
        ),  # Condense follow-up question and chat into a standalone_question
        RunnablePassthrough.assign(
            messages=lambda x: _format_messages(x["messages"])
        )
        | condense_question_prompt
        | llm
        | StrOutputParser(),
    ),
    # Else, we have no chat history, so just pass through the question
    RunnableLambda(itemgetter("question")),
)


def rag_chain(vector_db_namespace: str):
    rag_chain_inputs = RunnableParallel(
        {
            "question": lambda x: x["question"],
            "messages": lambda x: _format_messages(x["messages"]),
            "context": _search_query | retriever(vector_db_namespace) | _combine_documents,
            "agent_scratchpad": lambda x: format_to_openai_function_messages(
                x["intermediate_steps"]
            ),
        }
    ).with_types(input_type=RagChainInputType)
    return rag_chain_inputs | rag_chain_answer_prompt
