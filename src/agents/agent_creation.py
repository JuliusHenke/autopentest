from dotenv import load_dotenv
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.messages import HumanMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import AzureChatOpenAI
from langchain_openai import ChatOpenAI

from src.util import get_env_or_raise

# Load environment variables
load_dotenv()

# Create LLM based on Azure chat endpoint for GPT-4o
llm = AzureChatOpenAI(
    openai_api_version=get_env_or_raise("AZURE_OPENAI_COMPLETION_API_VERSION"),
    azure_deployment=get_env_or_raise("AZURE_OPENAI_COMPLETION_GPT_4O"),
    openai_api_key=get_env_or_raise("AZURE_OPENAI_COMPLETION_API_KEY"),
    temperature=0,
)


def create_agent(llm: ChatOpenAI, tools: list, system_prompt: str):
    # Each worker node will be given a name and some tools.
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                system_prompt,
            ),
            MessagesPlaceholder(variable_name="messages"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ]
    )
    agent = create_openai_tools_agent(llm, tools, prompt)
    executor = AgentExecutor(agent=agent, tools=tools)
    return executor


async def agent_node(state, agent, name):
    result = await agent.ainvoke(state)
    return {"messages": [HumanMessage(content=result["output"], name=name)]}
