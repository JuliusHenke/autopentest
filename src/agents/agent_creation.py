from dotenv import load_dotenv
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import AzureChatOpenAI

from agents.task_specific_agents import TaskSpecificAgent
from src.agents.rag import RagChainInputType, rag_chain
from src.util import get_env_or_raise

# Load environment variables
load_dotenv()

# Create LLM based on Azure chat endpoint for GPT-4o
llm = AzureChatOpenAI(
    openai_api_version=get_env_or_raise("AZURE_OPENAI_COMPLETION_API_VERSION"),
    azure_deployment=get_env_or_raise("AZURE_OPENAI_COMPLETION_GPT_4O"),
    openai_api_key=get_env_or_raise("AZURE_OPENAI_COMPLETION_API_KEY"),
    temperature=0,
)

def create_task_specific_agent_executor(agent: TaskSpecificAgent):
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                agent.system_prompt,
            ),
            MessagesPlaceholder(variable_name="messages"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ]
    )
    chain = rag_chain(agent.vector_db_namespace) | create_openai_tools_agent(llm, agent.tools, prompt)
    executor = AgentExecutor(
        agent=chain,
        tools=agent.tools,
        verbose=True,
        return_intermediate_steps=True,
        early_stop_method="generate"
    ).with_types(input_type=RagChainInputType)
    return executor



