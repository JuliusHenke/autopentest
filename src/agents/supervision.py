from langchain_core.output_parsers.openai_functions import JsonOutputFunctionsParser
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

from chat_completions import llm
from src.agents.task_specific_agents import task_specific_agent_names

SUPERVISOR = "supervisor"

system_prompt = ("You are a supervisor tasked with managing a conversation between the following workers: {members}. ")
# Our team supervisor is an LLM node. It just picks the next agent to process
# and decides when the work is completed
options = task_specific_agent_names
# Using openai function calling can make output parsing easier for us
function_def = {
    "name": "route",
    "description": "Select the next role.",
    "parameters": {
        "title": "routeSchema",
        "type": "object",
        "properties": {
            "next": {
                "title": "Next",
                "anyOf": [
                    {"enum": options},
                ],
            }
        },
        "required": ["next"],
    },
}
prompt = ChatPromptTemplate.from_messages(
    [
        ("system", system_prompt),
        MessagesPlaceholder(variable_name="messages"),
        (
            "system",
            "Given the conversation above, who should act next?"
            "Select one of: {options}",
        ),
    ]
).partial(options=str(options), members=", ".join(task_specific_agent_names))

supervisor_chain = (
        prompt
        | llm.bind_functions(functions=[function_def], function_call="route")
        | JsonOutputFunctionsParser()
)
