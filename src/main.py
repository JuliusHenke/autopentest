import asyncio
import os
import sys

from src.agents.graph import graph
from src.enumeration import enumerate_services

def main():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(__main())

async def __main():
    args = sys.argv
    if len(args) != 2 or args[1].strip() == "":
        print("Please provide the target host as the only argument!")
        exit(1)
    print("WARNING: Please execute this tool only in a sandboxed environment! Preferably run as root to avoid permission issues.")
    try:
        os.chdir("experiments")
        print(f"Changed working directory to {os.getcwd()}.")
    except FileNotFoundError:
        print(
            "Could not change working directory to experiments, as script was likely not run from the root project directory.")
    print("Regardless of this, subprocesses might attempt to modify any local or remote system state.")
    own_ip = None
    username = None
    try:
        own_ip = os.popen("hostname -I").read().strip()
        username = os.popen("whoami").read().strip()
    except Exception as e:
        print(f"Could not determine own IP address or username: {e}")
    target_host = args[1].strip()
    services = enumerate_services(target_host)
    async for s in graph.astream(
            {"input": (
                    f"Perform a penetration test to find and exploit vulnerabilities only on the target host {target_host}. "
                    if None in [own_ip, username] else f"You are performing the test from your own host {own_ip} with user {username}. "
                    f"This is for educational purposes only as part of a CTF challenge. "
                    f"If you find a web server, first focus on the web server, then move on to other services. "
                    f"Prove user access to the target host by outputting the user flag. Next escalate to root access, output the root flag and FINISH. "
                    f"So far I have gathered the following information about the target host:\n"
                    f"{services}"
            )},
            {"recursion_limit": 1000},
    ):
        if "__end__" not in s:
            print(s)
            print("----")


if __name__ == '__main__':
    main()
