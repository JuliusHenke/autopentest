import logging
from typing import List, Optional, Type, Union

from langchain_community.tools.shell.tool import _get_platform, ShellInput
from langchain_core.callbacks import (
    CallbackManagerForToolRun,
)
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain_core.tools import BaseTool

from tools.bash_process import BashProcess

logger = logging.getLogger(__name__)


def _get_default_bash_process() -> BashProcess:
    """Get default bash process."""
    return BashProcess(return_err_output=True)


class ShellToolWithTimeout(BaseTool):
    """Tool to run shell commands."""

    process: BashProcess = Field(default_factory=_get_default_bash_process)
    """Bash process to run commands."""

    name: str = "terminal"
    """Name of tool."""

    description: str = f"Run bash commands on this {_get_platform()} machine. Please use a realistic timeout in seconds to mitigate indefinite blocking."
    """Description of tool."""

    args_schema: Type[BaseModel] = ShellInput
    """Schema for input arguments."""

    ask_human_input: bool = False
    """
    If True, prompts the user for confirmation (y/n) before executing 
    a command generated by the language model in the bash shell.
    """

    def _run(
            self,
            commands: Union[str, List[str]],
            timeout: int = 60,
            run_manager: Optional[CallbackManagerForToolRun] = None,
    ) -> str:
        """Run commands and return final output. Timeout in seconds."""

        print(f"Executing command:\n {commands}")  # noqa: T201

        try:
            if self.ask_human_input:
                user_input = input("Proceed with command execution? (y/n): ").lower()
                if user_input == "y":
                    self.process.run(commands, timeout)
                else:
                    return "Invalid input. User aborted command execution."
            else:
                return self.process.run(commands, timeout)

        except Exception as e:
            return f"Error during command execution: {e}"
