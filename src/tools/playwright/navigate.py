from __future__ import annotations

from typing import Optional

from langchain_community.tools import NavigateTool
from langchain_core.callbacks import (
    AsyncCallbackManagerForToolRun,
    CallbackManagerForToolRun,
)


class CustomNavigateTool(NavigateTool):
    """Tool for navigating a browser to a URL."""

    def _run(
            self,
            url: str,
            run_manager: Optional[CallbackManagerForToolRun] = None,
    ) -> str:
        try:
            return super()._run(url=url, run_manager=run_manager)
        except Exception as e:
            return str(e)

    async def _arun(
            self,
            url: str,
            run_manager: Optional[AsyncCallbackManagerForToolRun] = None,
    ) -> str:
        try:
            return await super()._arun(url=url, run_manager=run_manager)
        except Exception as e:
            return str(e)
