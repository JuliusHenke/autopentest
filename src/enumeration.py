from __future__ import annotations

import subprocess
from typing import Tuple

import nmapthon2 as nm2
from nmapthon2.results import NmapScanResult

from src.tools.nist_nvd import search_and_aggregate_high_severity_cve


def enumerate_services(host: str) -> str:
    nmap_common_ports = nmap_scan_common_ports_and_versions(host)
    nmap_all_ports = nmap_scan_all_ports(host)

    nmap_common_ports.wait()
    nmap_common_ports_result = nmap_common_ports.get_result()
    print(f'Finished nmap common ports scan for {host}: {nmap_common_ports_result.summary}')

    found_web_service, cves = check_web_services_and_cves(nmap_common_ports_result)
    print(f'Found web services: {found_web_service}\nFound {len(cves)} potential CVEs')

    nuclei_result = None
    if found_web_service:
        nuclei_result = nuclei_scan(host, 240)
        print(f'Finished nuclei scan for {host}:\n', nuclei_result)

    nmap_all_ports_result = None
    if nmap_all_ports.finished() is True:
        nmap_all_ports_result = nmap_all_ports.get_result()
        print(f'Finished nmap all ports scan for {host}: {nmap_all_ports_result.summary}')
    else:
        print(f'Nmap all ports scan for {host} took too long, skipping')

    summary = create_enumeration_summary(nmap_common_ports_result, nmap_all_ports_result, nuclei_result, cves)
    print(summary)
    return summary


def nmap_scan_common_ports_and_versions(host: str) -> nm2.NmapAsyncScanner:
    print(f'Starting nmap common ports scan for {host}')
    nmap = nm2.NmapAsyncScanner()
    nmap.scan(host, arguments="-sV")
    return nmap


def nmap_scan_all_ports(host: str) -> nm2.NmapAsyncScanner:
    print(f'Starting nmap all ports scan for {host}')
    nmap = nm2.NmapAsyncScanner()
    nmap.scan(host, arguments="-p-")
    return nmap


def check_web_services_and_cves(result: NmapScanResult | None) -> Tuple[bool, list]:
    found_web_service = False
    cves = []
    # if result:
    #     for scanned_host in result:
    #         try:
    #             for port in scanned_host:
    #                 if port.service:
    #                     if 'http' in port.service.name or port.number in (80, 443):
    #                         found_web_service = True
    #                         print(f'Found potential web service on port {port.number}/{port.protocol}')
    #                     for cpe in port.service.cpes:
    #                         cves += search_and_aggregate_high_severity_cve(cpeName=cpe)
    #         except Exception as e:
    #             print("Error while checking for web services and cves using nmap result: ", e)

    return found_web_service, cves


def nuclei_scan(host: str, timeout: int) -> str | None:
    try:
        print(f'Starting nuclei scan for {host}')
        return scan(f"nuclei -u {host} -s medium,high,critical,unknown -nmhe -silent -rl 500", timeout)
    except Exception as e:
        print("Error during nuclei scan: ", e)


def scan(command: str, timeout: int) -> str | None:
    result = None
    try:
        result = subprocess.run(command, shell=True, capture_output=True,
                                universal_newlines=True, text=True, timeout=timeout, check=True)
        return result.stdout
    except subprocess.TimeoutExpired:
        print("Scan timed out after ", timeout, " seconds for command: ", command)
    except Exception as e:
        print("Error during scan with command: ", command)
        if result.stderr:
            print(result.stderr)
        print(e)


def create_enumeration_summary(nmap_common_ports_result: NmapScanResult | None,
                               nmap_all_ports_result: NmapScanResult | None,
                               nuclei_result: str | None,
                               cves: []) -> str:
    summary = ''
    if nmap_common_ports_result:
        summary += f'Nmap common ports scan result:\n{create_nmap_summary(nmap_common_ports_result)}\n'
    if nmap_all_ports_result:
        summary += f'Nmap all ports scan result:\n{create_nmap_summary(nmap_all_ports_result)}\n'
    if nuclei_result:
        summary += f'Nuclei scan result:\n{nuclei_result}\n'
    if len(cves) > 0:
        summary += f'Potentially related CVEs:\n{cves}\n'
    return summary


def create_nmap_summary(nmap_common_ports_result: NmapScanResult) -> str:
    summary = nmap_common_ports_result.arguments
    for host in nmap_common_ports_result:
        summary += f'\n\nHost: {host.ipv4}\n'
        summary += f'\tState: {host.state}\n'
        summary += f'\tReason: {host.reason}\n'
        summary += f'\tReason TTL: {host.reason_ttl}\n'
        summary += f'\tStarted at: {host.start_time}\n'
        summary += f'\tEnded at: {host.end_time}\n'
        summary += f'\tIpv6: {host.ipv6}\n'
        summary += f'\tMost accurate OS: {host.most_accurate_os()}\n'

        for hostname, hostname_type in host.hostnames(include_type=True):
            summary += f'\tHostname (f{hostname_type}): {hostname}\n'

        for port in host:
            summary += f'\n\tPort: {port.number}/{port.protocol}\n'
            summary += f'\t\tState: {port.state}\n'
            summary += f'\t\tReason: {port.reason}\n'
            summary += f'\t\tReason TTL: {port.reason_ttl}\n'

            service = port.service
            if service is not None:
                summary += f'\t\tName: {service.name}\n'
                summary += f'\t\tMethod: {service.method}\n'
                summary += f'\t\tConfidence: {service.conf}\n'
                if service.product:
                    summary += f'\t\tProduct: {service.product}\n'
                if service.version:
                    summary += f'\t\tVersion: {service.version}\n'
                if service.extrainfo:
                    summary += f'\t\tExtrainfo: {service.extrainfo}\n'
                if service.tunnel:
                    summary += f'\t\tTunnel: {service.tunnel}\n'
                if service.cpes and len(service.cpes) > 0:
                    summary += f'\t\tCPEs: {",".join(service.cpes)}\n'
    return summary


# Example usage
if __name__ == '__main__':
    print(enumerate_services('localhost'))
