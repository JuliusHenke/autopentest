import os

from dotenv import load_dotenv
from langchain_community.document_loaders import WebBaseLoader
from langchain_openai.embeddings import OpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore
from pinecone import ServerlessSpec
from pinecone.grpc import PineconeGRPC as Pinecone

# Load environment variables
load_dotenv()
pinecone = Pinecone(api_key=os.environ.get('PINECONE_API_KEY'))

# Load
def ingest(urls: [str], index_name: str):
    if index_name not in pinecone.list_indexes().names():
        pinecone.create_index(
            name=index_name,
            dimension=1536,
            metric="cosine",
            spec=ServerlessSpec(
                cloud='aws',
                region='us-east-1'
            )
        )

    for url in urls:
        # Parse web page
        loader = WebBaseLoader(url)
        data = loader.load()

        # Split
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)
        all_splits = text_splitter.split_documents(data)

        # Add to vectorDB
        # TODO: use Azure instance
        PineconeVectorStore.from_documents(
            documents=all_splits, embedding=OpenAIEmbeddings(model="text-embedding-3-small"), index_name=index_name
        )


def ingest_injection_agent_docs():
    ingest(["https://github.com/sqlmapproject/sqlmap/wiki/Usage"], "injection-agent")


# Example usage
if __name__ == "__main__":
    ingest_injection_agent_docs()
