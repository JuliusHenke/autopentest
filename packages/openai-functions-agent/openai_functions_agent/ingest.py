import os

from dotenv import load_dotenv
from langchain_community.document_loaders import WebBaseLoader
from langchain_openai.embeddings import AzureOpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore
from pinecone import ServerlessSpec
from pinecone.grpc import PineconeGRPC as Pinecone

# Load environment variables
load_dotenv()
pinecone = Pinecone(api_key=os.environ.get('PINECONE_API_KEY'))
pinecone_index = os.environ.get('PINECONE_INDEX', 'autopentest')


def ingest(urls: [str], namespace: str):
    create_pinecone_index_if_not_existent()
    for url in urls:
        # Parse web page
        loader = WebBaseLoader(url)
        data = loader.load()

        # Split content into chunks
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)
        all_splits = text_splitter.split_documents(data)

        # Add to vectorDB
        PineconeVectorStore.from_documents(
            documents=all_splits,
            embedding=AzureOpenAIEmbeddings(
                azure_endpoint=os.environ.get('AZURE_OPENAI_ENDPOINT'),
                azure_deployment=os.environ.get('AZURE_OPENAI_CHAT_NAME_GPT_4O'),
                api_version=os.environ.get('AZURE_OPENAI_API_VERSION'),
                openai_api_key=os.environ.get('AZURE_OPENAI_API_KEY'),
                model="text-embedding-ada-002",
            ),
            index_name=pinecone_index,
            namespace=namespace
        )


def create_pinecone_index_if_not_existent():
    if pinecone_index not in pinecone.list_indexes().names():
        print(f"Creating Pinecone index: {pinecone_index}")
        pinecone.create_index(
            name=pinecone_index,
            dimension=1536,
            metric="cosine",
            spec=ServerlessSpec(
                cloud='aws',
                region='us-east-1'
            )
        )
