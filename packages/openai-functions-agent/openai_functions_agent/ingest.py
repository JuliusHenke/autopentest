import os

from dotenv import load_dotenv
from langchain_community.document_loaders import WebBaseLoader
from langchain_openai.embeddings import AzureOpenAIEmbeddings, OpenAIEmbeddings
from langchain_pinecone import PineconeVectorStore
from pinecone import ServerlessSpec
from pinecone.grpc import PineconeGRPC as Pinecone

from openai_functions_agent.util import get_env_or_raise

# Load environment variables
load_dotenv()
use_azure_openai_embeddings = os.environ.get('USE_AZURE_OPENAI_EMBEDDING', 'false') == 'true'

pinecone = Pinecone(api_key=get_env_or_raise("PINECONE_API_KEY"))
pinecone_index = os.environ.get('PINECONE_INDEX', 'autopentest')

# https://platform.openai.com/docs/guides/embeddings/embedding-models
embedding_model_dimensions = {
    "text-embedding-ada-002": 1536,
    "text-embedding-3-small": 512,
    "text-embedding-3-large": 1024,
}


def ingest(urls: [str], namespace: str):
    create_pinecone_index_if_not_existent()
    for url in urls:
        # Parse web page
        print(f"Loading URL: {url}")
        loader = WebBaseLoader(url)
        data = loader.load()

        # Split content into chunks
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)
        all_splits = text_splitter.split_documents(data)

        # Add to vectorDB
        print(f"Adding {len(all_splits)} splits to Pinecone index: {pinecone_index}")
        PineconeVectorStore.from_documents(
            documents=all_splits,
            embedding=AzureOpenAIEmbeddings(
                azure_endpoint=get_env_or_raise("AZURE_OPENAI_ENDPOINT"),
                azure_deployment=get_env_or_raise("AZURE_OPENAI_EMBEDDING_ADA_2"),
                api_version=get_env_or_raise("AZURE_OPENAI_EMBEDDING_API_VERSION"),
                openai_api_key=get_env_or_raise("AZURE_OPENAI_EMBEDDING_API_KEY"),
                model="text-embedding-ada-002",
            ) if use_azure_openai_embeddings else OpenAIEmbeddings(
                model="text-embedding-3-small",
                dimensions=embedding_model_dimensions["text-embedding-3-small"],
                openai_api_key=os.environ.get("OPENAI_API_KEY")
            ),
            index_name=pinecone_index,
            namespace=namespace
        )


def create_pinecone_index_if_not_existent():
    if pinecone_index not in pinecone.list_indexes().names():
        print(f"Creating Pinecone index: {pinecone_index}")
        pinecone.create_index(
            name=pinecone_index,
            dimension=embedding_model_dimensions["text-embedding-ada-002"] if use_azure_openai_embeddings else
            embedding_model_dimensions["text-embedding-3-small"],
            metric="cosine",
            spec=ServerlessSpec(
                cloud='aws',
                region='us-east-1'
            )
        )
