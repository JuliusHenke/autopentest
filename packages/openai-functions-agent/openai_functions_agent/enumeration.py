import subprocess
import nmapthon2 as nm2
from nmapthon2.results import NmapScanResult

from openai_functions_agent.tools.nist_nvd import search_cve


def enumerate_services(host: str) -> str:
    print(f'Starting nmap common ports scan for {host}')
    nmap_common_ports = nmap_scan_common_ports_and_versions(host)
    print(f'Starting nmap all ports scan for {host}')
    nmap_all_ports = nmap_scan_all_ports(host)

    nmap_common_ports.wait()
    nmap_common_ports_result = nmap_common_ports.get_result()
    print(f'Finished nmap common ports scan for {host}')

    found_web_service = False
    cves = []
    if nmap_common_ports_result:
        for scanned_host in nmap_common_ports_result:
            print(f'Discovered host {scanned_host.ipv4}')
            os = scanned_host.most_accurate_os()
            if os:
                print(f'OS: {os.name}')

            for port in scanned_host:
                if 'http' in port.service.name or port.number in (80, 443):
                    found_web_service = True
                    print(f'Found potential web service on port {port.number}/{port.protocol}')
                for cpe in port.service.cpes:
                    print(f'Searching CVE for {cpe}')
                    cves.append(search_cve(cpeName=cpe))

    nuclei_result = None
    if found_web_service:
        print(f'Starting nuclei scan for {host}')
        nuclei_result = nuclei_scan(host, 120)
        print(f'Finished nuclei scan for {host}')

    nmap_all_ports_result = None
    if nmap_all_ports.finished() is True:
        nmap_all_ports_result = nmap_all_ports.get_result()
        print(f'Finished nmap all ports scan for {host}')
    else:
        print(f'Nmap all ports scan for {host} took too long, skipping')

    return create_summary(nmap_common_ports_result, nmap_all_ports_result, nuclei_result, cves)


def create_summary(nmap_common_ports_result: NmapScanResult | None,
                   nmap_all_ports_result: NmapScanResult | None,
                   nuclei_result: str | None,
                   cves: []) -> str:
    summary = ''
    if nmap_common_ports_result:
        summary += f'Nmap common ports scan:\n{nmap_common_ports_result.summary}\n'
    if nmap_all_ports_result:
        summary += f'Nmap all ports scan:\n{nmap_all_ports_result.summary}\n'
    if nuclei_result:
        summary += f'Nuclei scan:\n{nuclei_result}\n'
    if cves:
        summary += f'Potentially related CVEs:\n{cves}\n'
    return summary


def nmap_scan_common_ports_and_versions(host: str) -> nm2.NmapAsyncScanner:
    nmap = nm2.NmapAsyncScanner()
    nmap.scan(host, arguments="-sV")
    return nmap


def nmap_scan_all_ports(host: str) -> nm2.NmapAsyncScanner:
    nmap = nm2.NmapAsyncScanner()
    nmap.scan(host, arguments="-p-")
    return nmap


def nuclei_scan(host: str, timeout: int) -> str | None:
    return scan(f"nuclei -u {host} -s medium,high,critical,unknown -no-max-host-error -silent", timeout)


def scan(command: str, timeout: int) -> str | None:
    try:
        result = subprocess.run(command, shell=True, capture_output=True,
                                universal_newlines=True, text=True, timeout=timeout, check=True)
        return result.stdout
    except subprocess.TimeoutExpired:
        print("Scan timed out after ", timeout, " seconds for command: ", command)
    except Exception as e:
        print("Error during scan with command: ", command)
        print(e)


if __name__ == '__main__':
    print(enumerate_services('scanme.nmap.org'))
