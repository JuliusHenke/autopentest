import os

from dotenv import load_dotenv
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.messages import HumanMessage
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import AzureChatOpenAI
from langchain_openai import ChatOpenAI

# Load environment variables
load_dotenv()
if os.environ.get("AZURE_OPENAI_API_VERSION", None) is None:
    raise Exception("Missing `AZURE_OPENAI_API_VERSION` environment variable.")
if os.environ.get("AZURE_OPENAI_CHAT_NAME_GPT_4O", None) is None:
    raise Exception("Missing `AZURE_OPENAI_CHAT_NAME_GPT_4O` environment variable.")

# Create LLM based on Azure chat endpoint for GPT-4o
llm = AzureChatOpenAI(
    openai_api_version=os.environ["AZURE_OPENAI_API_VERSION"],
    azure_deployment=os.environ["AZURE_OPENAI_CHAT_NAME_GPT_4O"],
)


def create_agent(llm: ChatOpenAI, tools: list, system_prompt: str):
    # Each worker node will be given a name and some tools.
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                system_prompt,
            ),
            MessagesPlaceholder(variable_name="messages"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ]
    )
    agent = create_openai_tools_agent(llm, tools, prompt)
    executor = AgentExecutor(agent=agent, tools=tools)
    return executor


def agent_node(state, agent, name):
    result = agent.invoke(state)
    return {"messages": [HumanMessage(content=result["output"], name=name)]}
