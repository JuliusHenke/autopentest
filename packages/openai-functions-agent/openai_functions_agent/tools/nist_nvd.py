import os
from datetime import datetime
from typing import Tuple

import nvdlib
from langchain_core.tools import tool
from dotenv import load_dotenv

NIST_NVD_CPE_RESULT_LIMIT = 100
NIST_NVD_CVE_RESULT_LIMIT = 10
NIST_NVD_API_KEY = os.environ["NIST_NVD_API_KEY"] if "NIST_NVD_API_KEY" in os.environ else None

# Load environment variables
load_dotenv()


@tool
def search_cpe(cpeMatchString: str = None,
               keywordSearch: str = None
               ):
    """Search for CPEs in the NIST NVD that can later be used to search for CVEs. Only use parameters that are necessary for the search.

   :param cpeMatchString: Use a partial CPE name to search for other CPE names.
   :param keywordSearch: Returns CPE records where a word or phrase is found in the metadata title or reference links.
   """
    return nvdlib.searchCPE(cpeMatchString=cpeMatchString,
                            keywordSearch=keywordSearch, limit=NIST_NVD_CPE_RESULT_LIMIT, key=NIST_NVD_API_KEY,
                            verbose=True)


@tool
def search_cve(
        cpeName: str = None,
        cweId: str = None,
        keywordSearch: str = None,
        # pubStartDate: Tuple[str, datetime] = None,
        # pubEndDate: Tuple[str, datetime] = None,
):
    """Search for CVEs in the NIST NVD. Only use parameters that are necessary for the search.

    :param cpeName: This value will be compared against the CPE Match Criteria within a CVE applicability statement. Partial match strings are allowed.
    :param cweId: Filter collection by CWE. A CVE can have multiple CWE IDs assigned to it.
    :param keywordSearch: Searches CVEs where a word or phrase is found in the current description.
    """
    #     :param pubStartDate: Required if using pubEndDate. Maximum range is 120 consecutive days.
    #     :param pubEndDate: Required if using pubStartDate.

    # Aggregate CVEs with HIGH or CRITICAL severity for both CVSS v2 and v3
    aggregated_results = []
    for severity in ["V2_HIGH", "V3_HIGH", "V3_CRITICAL"]:
        aggregated_results.append(nvdlib.searchCVE(
            cpeName=cpeName,
            cweId=cweId,
            keywordSearch=keywordSearch,
            noRejected=True,
            cvssV2Severity=severity.strip("V2_") if severity.startswith("V2") else None,
            cvssV3Severity=severity.strip("V3_") if severity.startswith("V3") else None,
            # pubStartDate=pubStartDate,
            # pubEndDate=pubEndDate,
            limit=NIST_NVD_CVE_RESULT_LIMIT, key=NIST_NVD_API_KEY, verbose=True))
    return aggregated_results


@tool
def get_cve(cveId: str):
    """Get a single CVE with a known cveId from the NIST NVD."""
    return nvdlib.searchCVE(cveId=cveId, limit=1, key=NIST_NVD_API_KEY, verbose=True)
